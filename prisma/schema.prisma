// commented schema not yet pushed to db

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  phone            String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  items            Item[]
  sentRequests     Request[] @relation("SentRequests")
  receivedRequests Request[] @relation("ReceivedRequests")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String
  price       String?   @default("0")
  imageUrl    String?
  publicId    String?
  catName     String?
  category    Category? @relation(fields: [catName], references: [catName])
  author      User      @relation(fields: [authorEmail], references: [email])
  authorEmail String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  requests    Request[]

  @@fulltext([description, price, authorEmail, catName])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  catName String   @unique
  items   Item[]
  itemIDs String[] @db.ObjectId
}

model Request {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  itemId     String   @db.ObjectId
  status     String   @default("Pending") // "pending", "approved", "denied", etc.
  createdAt  DateTime @default(now())

  sender   User @relation(fields: [senderId], references: [id], name: "SentRequests")
  receiver User @relation(fields: [receiverId], references: [id], name: "ReceivedRequests")
  item     Item @relation(fields: [itemId], references: [id])
}
